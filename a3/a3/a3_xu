import tkinter as tk
from tkinter import filedialog  # For masters task
from typing import Callable, Union, Optional
from a3_support import *
from model import *
from constants import *


# Implement your classes here
player_x, player_y = 25, 25
class InfoBar(AbstractGrid):
    """
    """

    def __init__(self, master: tk.Tk | tk.Frame) -> None:
        """Sets up the InfoBar.

        Parameters:
        master:
        """
        super().__init__(
            master,
            dimensions=(2, 3),
            size=(FARM_WIDTH + INVENTORY_WIDTH, INFO_BAR_HEIGHT)
        )
        self.annotate_position((0, 0), "Day:", HEADING_FONT)
        self.annotate_position((0, 1), "Money:", HEADING_FONT)
        self.annotate_position((0, 2), "Energy:", HEADING_FONT)

    def redraw(self, day: int, money: int, energy: int) -> None:
        """Clears the InfoBar and redraws it to display the provided day,
        money, and energy.

        Parameters:
        day:

        money:

        energy:
        """
        self.clear()
        self.annotate_position((0, 0), "Day:", HEADING_FONT)
        self.annotate_position((1, 0), str(day), HEADING_FONT)
        self.annotate_position((0, 1), "Money:", HEADING_FONT)
        self.annotate_position((1, 1), "$" + str(money), HEADING_FONT)
        self.annotate_position((0, 2), "Energy:", HEADING_FONT)
        self.annotate_position((1, 2), str(energy), HEADING_FONT)


class FarmView(AbstractGrid):
    """
    """

    def __init__(self, master: tk.Tk | tk.Frame, dimensions: tuple[int, int],
                 size: tuple[int, int], **kwargs) -> None:
        """
        """
        super().__init__(master, dimensions=dimensions, size=size)
        self.cache = {}
        for value in IMAGES.values():
            picture_path = f"images/{value}"
            get_image(picture_path, self.get_cell_size(), self.cache)

    def redraw(self, ground: list[str], plants: dict[tuple[int, int], 'Plant'],
               player_position: tuple[int, int], player_direction: str) -> None:
        """
        """
        self.clear()
        # Draw the ground.
        for i, row in enumerate(ground):
            for j, col in enumerate(row):
                p = (i, j)
                pixel_x, pixel_y = self.get_midpoint(p)
                if col in ['S', "U", "G"]:
                    # Get the picture name based on the col value.
                    picture_name = IMAGES[col]
                    # Get the picture path using the picture_name.
                    ground_picture_name = f"images/{picture_name}"
                    cell_ground = self.cache.get(ground_picture_name)
                    self.create_image(pixel_x, pixel_y, image=cell_ground)
        # Draw the plants.
        for key, value in plants.items():
            plant_x, plant_y = self.get_midpoint(key)
            plant_image_name = f'images/' + get_plant_image_name(value)
            plant = Image.open(plant_image_name).resize(self.get_cell_size())
            plant_img = ImageTk.PhotoImage(plant)
            self.create_image(plant_x, plant_y, image=plant_img)
        # Draw the player.
        player = f"images/player_{player_direction}.png"
        player_img = self.cache.get(player)
        pixel_x2, pixel_y2 = self.get_midpoint(player_position)
        player_id = self.create_image(pixel_x2, pixel_y2, image=player_img)
        # 定义角色移动速度
        speed = 50

        # 控制角色移动的函数
        def move_player(dx, dy):
            global player_x, player_y
            player_x_result = player_x + dx * speed
            player_y_result = player_y + dy * speed
            player_x = player_x_result if 0 < player_x_result < 500 else player_x
            player_y = player_y_result if 0 < player_y_result < 500 else player_y
            if 0 < player_x < 500 and 0 < player_y < 500:
                self.coords(player_id, player_x, player_y)

        # 配置键盘事件
        def on_key_press(event):
            if event.keysym == 'w':
                move_player(0, -1)
            elif event.keysym == 's':
                move_player(0, 1)
            elif event.keysym == 'a':
                move_player(-1, 0)
            elif event.keysym == 'd':
                move_player(1, 0)
        self.bind('<KeyPress>', on_key_press)
        self.focus_set()


class ItemView(tk.Frame):
    """A frame displaying relevant information and buttons for a single item."""

    def __init__(self, master: tk.Frame, item_name: str, amount: int,
                 select_command: Optional[Callable[[str], None]] = None,
                 sell_command: Optional[Callable[[str], None]] = None,
                 buy_command: Optional[Callable[[str], None]] = None) -> None:
        """
        """
        super().__init__(master)
        self.item_name = item_name
        self.amount = amount
        # Determine the background colour
        if amount == 0:
            bg_colour = INVENTORY_EMPTY_COLOUR
        else:
            bg_colour = INVENTORY_COLOUR
        # Build a label frame.
        label_frame = tk.Frame(self, width=100, height=FARM_WIDTH // 6, bg=bg_colour)
        label_frame.pack_propagate(False)
        label_frame.pack(side=tk.LEFT)
        label1 = tk.Label(label_frame, text=item_name + " :" + str(amount), bg=bg_colour)
        label1.pack(side=tk.TOP)
        label2 = tk.Label(label_frame, text="Sell price : $" + str(SELL_PRICES[item_name]), bg=bg_colour)
        label2.pack(side=tk.TOP)
        label3 = tk.Label(label_frame, text="Buy price : $" + str(BUY_PRICES.get(item_name, 'N/A')), bg=bg_colour)
        label3.pack(side=tk.TOP)
        # Buile a button frame.
        button_frame = tk.Frame(self, width=100, height=FARM_WIDTH // 6, bg=bg_colour)
        button_frame.pack_propagate(False)
        button_frame.pack(side=tk.LEFT)
        if str(BUY_PRICES.get(item_name, 'N/A')) != 'N/A':
            button1 = tk.Button(button_frame, text="Buy", command=buy_command, bg="white")
            button1.pack(side=tk.LEFT, padx=10)
        button2 = tk.Button(button_frame, text="Sell", command=sell_command, bg="white")
        button2.pack(side=tk.LEFT, padx=10)
        master.bind("<Button-1>", select_command)

    def update(self, amount: int, selected: bool = False) -> None:
        """
        """
        self.label1.configure(text=f"{self.item_name}:{amount}")
        if amount > 0:
            self.configure(bg=INVENTORY_COLOUR)
        else:
            self.configure(bg=INVENTORY_EMPTY_COLOUR)
        if selected:
            self.configure(bg=INVENTORY_SELECTED_COLOUR)


class FarmGame(object):
    """
    """

    def __init__(self, master: tk.Tk, map_file: str) -> None:
        """
        """
        # Set the title of the window.
        master.title("Farm Game")
        # master.option_add("*Font", HEADING_FONT)
        farm_model = FarmModel(map_file)
        # Create the main GUI window.
        # banner
        banner_frame = tk.Frame(master)
        banner_frame.pack(side=tk.TOP, fill=tk.X)
        cache1 = {}
        picture_title = f"images/header.png"
        get_image(
            picture_title,
            size=(FARM_WIDTH + INVENTORY_WIDTH, BANNER_HEIGHT),
            cache=cache1
        )
        label4 = tk.Label(banner_frame, image=cache1.get(picture_title))
        label4.pack()
        # next_day button
        button_frame = tk.Frame(master)
        button_frame.pack(side=tk.BOTTOM)
        button = tk.Button(button_frame, text='Next day', command=lambda: turn_new_day(farm_model, info_bar))
        button.pack()

        # Create an instance.
        info_bar = InfoBar(master)
        info_bar.pack(side=tk.BOTTOM)
        info_bar.redraw(1, 0, 100)

        # Pack within the GUI.
        farm_view = FarmView(master, dimensions=farm_model.get_dimensions(), size=(FARM_WIDTH, FARM_WIDTH))
        farm_view.pack(side=tk.LEFT)
        farm_view.redraw(farm_model.get_map(), farm_model.get_plants(), farm_model.get_player().get_position(),
                         farm_model.get_player().get_direction())

        item_list_frame = tk.Frame(master, width=INVENTORY_WIDTH, height=FARM_WIDTH)
        item_list_frame.pack(side=tk.LEFT, fill=tk.BOTH)
        for i in range(len(ITEMS)):
            # 构建item_list
            item_view = ItemView(item_list_frame, ITEMS[i], farm_model.get_player().get_inventory().get(ITEMS[i], 0))
            item_view.pack(side=tk.TOP)
        master.mainloop()

        # # Set the title of the window.
        # master.title("Farm Game")
        # master.option_add("*Font", HEADING_FONT)
        # # Create the title banner.
        # banner_frame = tk.Frame(master)
        # banner_frame.pack(side=tk.TOP, fill=tk.X)
        # cache1 = {}
        # picture_title = f"images/header.png"
        # get_image(
        #     picture_title,
        #     size=(FARM_WIDTH + INVENTORY_WIDTH, BANNER_HEIGHT),
        #     cache=cache1
        # )
        # label4 = tk.Label(banner_frame, image=cache1.get(picture_title))
        # label4.pack()
        # # Create the FarmModel instance.
        # self.model = FarmModel(map_file)
        # self.player = self.model.get_player()
        # self.inventory = self.player.get_inventory()
        # dimensions1 = self.model.get_dimensions()
        # frame1 = tk.Frame(master)
        # frame1.pack()
        # self.fv = FarmView(frame1, dimensions=dimensions1,
        #                    size=(FARM_WIDTH, FARM_WIDTH))
        # self.fv.pack(side=tk.TOP)
        # iv1 = ItemView("Potato Seed", self.inventory['Potato Seed'], None, None, None)
        # iv1.pack()
        # iv2 = ItemView("Kale Seed", self.inventory['Kale Seed'], None, None, None)
        # iv2.pack()
        # iv3 = ItemView("Berry Seed", self.inventory['Berry Seed'], None, None, None)
        # iv3.pack()
        # iv4 = ItemView("Potato", self.inventory['Potato'], None, None, None)
        # iv4.pack()
        # iv5 = ItemView("Kale", self.inventory['Kale'], None, None, None)
        # iv5.pack()
        # iv6 = ItemView("Berry", self.inventory['Berry'], None, None, None)
        # iv6.pack()
        # # Create the instances of view classes.
        # # Create the InfoBar instance.
        # info_bar = InfoBar(master)
        # info_bar.pack(side=tk.BOTTOM)
        # info_bar.redraw(1, 0, 100)
        # # Create a button to enable users to increment the day.
        # self.button = tk.Button(master, text="Next day", command=self.model.new_day)
        # self.button.pack()
        # # Bind the handle_keypress method.
        # master.bind('<KeyPress>', self.handle_keypress)
        # # Call the redraw method to ensure the view draws according to the current model state.
        # InfoBar.redraw(
        #     day=self.model.get_days_elapsed(),
        #     money=self.player.get_money(), energy=self.player.get_energy())
        # self.fv.redraw = (
        #     ground = self.model.get_map(),
        # plants = self.model.get_plants(),
        # player_position = self.model.get_player_position(),
        # player_direction = self.model.get_player_direction())

        def redraw(self) -> None:
            """
            """
            pass

        def handle_keypress(self, event: tk.Event) -> None:
            """
            """
            pass

        def select_item(self, item_name: str) -> None:
            """
            """
            pass

        def buy_item(self, item_name: str) -> None:
            """
            """
            pass

        def sell_item(self, item_name: str) -> None:
            """
            """
            pass


def turn_new_day(farm_model, info_bar):
    farm_model.new_day()
    info_bar.redraw(farm_model.get_days_elapsed(), farm_model.get_player().get_money(),
                    farm_model.get_player().get_energy())


def play_game(root: tk.Tk, map_file: str) -> None:
        """
        Create the window.

        Parameters:
        root:

        map_file:
        """
        game = FarmGame(root, map_file)


def main() -> None:
    """
    Create the window, ensure it displays when the program is run and set its
    title.
    """
    # Create the main GUI window.
    root = tk.Tk()
    map_file = 'maps/map1.txt'
    FarmGame(root, map_file)


if __name__ == '__main__':
    main()
